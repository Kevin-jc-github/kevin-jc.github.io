[{"content":"Internship Experience Apexus-Tech | Software Development Engineer Intern Jersey City, New Jersey\nJuly 2024 â€“ October 2024\nDuring my internship at Apexus-Tech, I was responsible for developing and backtesting quantitative trading strategies using the Backtrader framework. I gained hands-on experience in implementing trade execution through the Interactive Brokers API, enhancing my skills in algorithmic trading.\nI designed and optimized a Moving Average Crossover trading strategy, conducted real-time trading tests in a simulated market environment, and analyzed the results to make informed adjustments to the strategy. This project improved my ability to work with financial data and think critically about trading strategy performance.\nAdditionally, I researched and deployed Grafana for data visualization, comparing its local deployment with cloud services in terms of cost, performance, and usability. I successfully integrated Grafana with MySQL to provide real-time visualization of financial data, which was instrumental in helping the team make data-driven decisions.\nAnalogix Semiconductor | IC Verification Engineer Intern Suzhou, China\nJuly 2022 â€“ September 2022\nAt Analogix Semiconductor, I worked as an IC Verification Engineer Intern, where I designed and implemented verification test cases for ASIC design using SystemVerilog and the UVM framework. This role allowed me to deepen my understanding of digital circuit design and verification methodologies.\nI evaluated the performance of various IP modules, analyzing timing and power data to identify potential improvements. My suggestions for optimization were aimed at enhancing overall module efficiency.\nAdditionally, I gained valuable debugging experience by addressing random test case failures through regression testing. This helped me sharpen my problem-solving skills and allowed me to experience firsthand the iterative nature of hardware design and verification.\n","date":"2024-10-07T11:19:15-05:00","permalink":"https://kevin-jc-github.github.io/kevin-jc.github.io/p/internship/","title":"Internship"},{"content":"Jiancong Zhu ðŸ“ž 949-867-8697 | ðŸ“§ jiancoz@u.northwestern.edu | LinkedIn | GitHub\nEducation Northwestern University, Chicago, IL Master of Science in Accelerated Data Science\nExpected Graduation: Aug 2025\nUniversity of California, Irvine, Irvine, CA Bachelor of Science in Computer Engineering\nSep 2020 â€“ Jun 2024\nRelated Coursework: Operating System, Computer Network, Database, Data Structures and Algorithms, Digital Systems\nTechnical Skills Languages: Java, Python, C/C++, SQL, JavaScript, HTML/CSS, R Frameworks: SpringBoot, Vue, React, Node.js, Flask, MyBatis Databases: MySQL, MongoDB Middlewares: Redis, Apache RocketMQ, Sentinel from Alibaba Tools: Git, Spring Cloud, VS Code, Visual Studio, IntelliJ Professional Experience Apexus-Tech Software Development Engineer Intern\nJuly 2024 â€“ Oct 2024, Jersey City, New Jersey\nDeveloped and backtested quantitative trading strategies using the Backtrader framework, and implemented trade execution via the Interactive Brokers API. Designed and improved a Moving Average Crossover trading strategy, conducted real-time stock trading tests in a simulated market environment, recorded and analyzed the strategyâ€™s performance, and performed optimization adjustments. Researched and deployed the Grafana data visualization tool, exploring differences between Grafana\u0026rsquo;s local deployment and cloud service versions, evaluating their pros and cons in terms of cost, performance, and usability. Integrated it with MySQL to achieve real-time visualization of financial data. Analogix Semiconductor IC Verification Engineer Intern\nJuly 2022 â€“ Sep 2022, Suzhou, China\nDesigned and implemented verification test cases for ASIC design using SystemVerilog and UVM framework. Evaluated the performance of IP modules, analyzed timing and power data, and provided optimization suggestions to enhance performance. Corrected random test case failures through regression testing, gaining real-world debugging experience. Related Projects TrainTicketSys Technologies: SpringBoot, Spring Cloud, Apache RocketMQ, Redis, Vue.js, Git\nMay 2024 â€“ Jul 2024\nDeveloped a railway ticketing system with infrastructure based on JDK 17, SpringBoot 3, and SpringCloud Alibaba, implementing functionalities for member registration, ticket inquiry, and ticket booking. Optimized response time and throughput during high concurrency ticket booking scenarios, achieving a 25x increase in system performance. Resolved cache and database consistency issues. Utilized Apache RocketMQâ€™s delayed message feature to enable automatic order cancellation for tickets not paid within 10 minutes. Implemented token and CAPTCHA mechanisms to prevent automated ticket booking during high concurrency periods, reducing server load. E-commerce Flash Sale Platform Technologies: SpringBoot, Redis, RocketMQ, MyBatis, Git\nMar 2023 â€“ May 2023\nDeveloped an e-commerce platform capable of efficiently handling high-concurrency flash sale events. Implemented caching with Redis and message queuing with Apache RocketMQ to enhance system performance. Optimized system performance for high concurrency scenarios. Managed high traffic during flash sales, ensuring the stability and reliability of the system. CampFinder Technologies: Node.js, Express, MongoDB, Bootstrap, Passport.js, Git\nFeb 2022 â€“ Apr 2022\nDeveloped a comprehensive website for creating and managing camping sites using a CRUD design pattern. Developed user features, including user registration and a review system for camping sites, enhancing user interaction. Utilized Node.js and Express.js for backend development, MongoDB for database management, and Bootstrap for optimizing responsive frontend layouts. Interests Gym, piano, saxophone, skiing, swimming, hiking, table tennis ","date":"2024-10-07T11:04:20-05:00","permalink":"https://kevin-jc-github.github.io/kevin-jc.github.io/p/my_resume/","title":"My_Resume"},{"content":"Creating Your Personal Website with the Hugo Stack Theme This guide will walk you through the steps to create your personal website using the Hugo Stack theme. The Stack theme provides a modern and minimalist design, suitable for personal blogs and project portfolios.\nPrerequisites Make sure you have the following installed on your system:\nHugo (version 0.62 or higher) Git If you don\u0026rsquo;t have Hugo installed, you can follow Hugo\u0026rsquo;s installation guide to set it up.\nStep 1: Create a New Hugo Site Start by creating a new Hugo site using the command below:\n1 $ hugo new site my-website This command will create a new folder named my-website containing the basic structure for your Hugo website.\nStep 2: Add the Stack Theme Navigate to your project folder and add the Stack theme as a submodule:\n1 2 3 $ cd my-website $ git init $ git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack Alternatively, you can clone the repository directly:\n1 $ git clone https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack Step 3: Configure the Theme To use the Stack theme, update the config.toml file in your project root directory:\n1 theme = \u0026#34;hugo-theme-stack\u0026#34; You can also use the sample configuration provided by the theme as a starting point. Copy the config folder from the theme to your project:\n1 $ cp -r themes/hugo-theme-stack/exampleSite/config ./ This will copy a pre-configured config directory to your project, which you can edit to customize your site.\nStep 4: Add Content Now that the theme is set up, you can start adding content to your website. Hugo uses Markdown files to create pages and posts.\nCreate a new post:\n1 $ hugo new posts/my-first-post.md This command will create a new Markdown file in the content/posts directory. Open it and edit the front matter and content as desired.\nCreate a new page:\n1 $ hugo new about.md This will create an about.md file in the content directory for your About page.\nStep 5: Customize Your Site The Stack theme offers several configuration options to personalize your website. Edit the config.toml or config/_default/ files to change settings such as:\nSite Title: Set your website\u0026rsquo;s name. Social Links: Add links to your social profiles (GitHub, LinkedIn, etc.). Theme Settings: Change theme colors, fonts, and other visual elements. Refer to the theme documentation for more details on configuration options.\nStep 6: Run Your Site Locally To preview your site locally, use the Hugo server command:\n1 $ hugo server -D Navigate to http://localhost:1313 in your browser to see your website in action. The -D flag ensures that draft content is also rendered.\nStep 7: Deploy Your Site Once you\u0026rsquo;re happy with your website, you can build it for deployment using:\n1 $ hugo The generated static files will be placed in the public directory. You can deploy these files to your preferred hosting service, such as GitHub Pages, Netlify, or Vercel.\nFor GitHub Pages, you can push the content of the public directory to your gh-pages branch:\n1 2 3 $ git add public $ git commit -m \u0026#34;Deploy site\u0026#34; $ git subtree push --prefix public origin gh-pages Additional Resources Hugo Documentation Stack Theme Documentation Hugo Themes With these steps, you can create a beautiful and functional personal website using the Hugo Stack theme. Enjoy building your site, and happy blogging!\n","date":"2024-10-06T23:36:34-05:00","permalink":"https://kevin-jc-github.github.io/kevin-jc.github.io/p/documentation_of_website/","title":"Documentation_of_Website"},{"content":"E-commerce Flash Sale Platform Technologies: SpringBoot, Redis, RocketMQ, MyBatis, Git\nDuration: Mar 2023 - May 2023\nThe E-commerce Flash Sale Platform is built to handle high-concurrency flash sale events effectively. The system uses SpringBoot as the backbone with Redis for caching and RocketMQ for efficient message queuing, ensuring reliable and scalable performance during high-traffic periods.\nI implemented optimizations for system performance that made it capable of handling the surge in traffic typical of flash sales. The focus was on ensuring stability and reliability, even during high-load situations. This was achieved by managing caching strategies and leveraging asynchronous message queues to decouple system components, allowing them to process requests more efficiently.\n","date":"2024-10-06T22:31:13-05:00","permalink":"https://kevin-jc-github.github.io/kevin-jc.github.io/p/project2_e_commerce_flash_sale_platform/","title":"Project2_E_Commerce_Flash_Sale_Platform"},{"content":"Project1_TrainTicSys TrainTicketSys Technologies: SpringBoot, Spring Cloud, Apache RocketMQ, Redis, Vue.js, Git\nDuration: May 2024 - Jul 2024\nTrainTicketSys is a comprehensive railway ticketing system designed with modern microservice architecture using SpringBoot 3, SpringCloud Alibaba, and JDK 17. The system allows users to register as members, search for available tickets, and complete bookings seamlessly.\nI optimized the system to improve response time and throughput during peak usage, achieving a 25x increase in performance by refining high-concurrency scenarios. Additionally, I resolved cache and database consistency issues to ensure data accuracy. Leveraging Apache RocketMQ\u0026rsquo;s delayed messaging, I implemented automatic order cancellation for unpaid tickets after a 10-minute window. To safeguard the booking process, I added token and CAPTCHA mechanisms, significantly reducing server load from automated ticket requests.\n","date":"2024-10-06T22:28:12-05:00","permalink":"https://kevin-jc-github.github.io/kevin-jc.github.io/p/projec1_trainticsys/","title":"Projec1_TrainTicSys"}]